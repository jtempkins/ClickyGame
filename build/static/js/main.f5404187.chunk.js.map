{"version":3,"sources":["components/Navbar/navbar.js","components/Instructions/instructions.js","components/Mysticals/mysticals.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","clickQuality","clickImage","score","highScore","Instructions","Mysticals","key","target","src","image","alt","Game","state","count","handleIncrement","setState","console","log","pictures","map","item","id","onClick","Component","App","mysticals","shuffleArray","wasClicked","shake","clickEvent","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","this","shuffled","includes","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ksCAceA,G,YAXA,SAAAC,GAAK,OAClB,yBAAKC,UAAU,WACb,4CACA,yBAAKA,UAAWD,EAAME,cAAeF,EAAMG,YAC3C,uCACUH,EAAMI,MADhB,IACuB,0BAAMH,UAAU,QAAhB,KADvB,gBACoED,EAAMK,cCC7DC,G,MANI,kBACjB,yBAAKL,UAAU,uEACb,uBAAGA,UAAU,OAAb,wF,OCcSM,G,MATG,SAAAP,GAEhB,OACA,yBAAKC,UAAU,OAAOO,IAAKR,EAAMS,OAAOD,KACtC,yBAAKP,UAAU,2BAA2BS,IAAKV,EAAMS,OAAOE,MAAOC,IAAI,QCyB5DC,G,iNA7BbC,MAAQ,CACNC,MAAO,G,EAITC,gBAAkB,WAEhB,EAAKC,SAAS,CAAEF,MAAO,EAAKD,MAAMC,MAAQ,IAC1CG,QAAQC,IAAI,EAAKL,MAAMC,Q,wEAGf,IAAD,OAEP,OACE,yBAAKd,UAAU,OACZmB,EAASC,KAAI,SAAAC,GAAI,OAChB,yBAAKrB,UAAU,WAAWO,IAAKc,EAAKC,IAClC,kBAAC,EAAD,CACEd,OAAQa,EACRrB,UAAU,kBAAkBuB,QAAS,EAAKR,2B,GApBrCS,cC6IJC,E,2MA1IbZ,MAAQ,CACNV,MAAO,EACPC,UAAW,EAGXH,aAAc,GAGdC,WAAY,GAGZwB,UAAW,EAAKC,eAGhBC,WAAY,GAGZC,OAAO,G,EAGTC,WAAa,EAAKC,aAAaC,KAAlB,gB,8EAcX,IARA,IAAMC,EAASd,EAASe,QAGlBC,EAAa,GAKZF,EAAOG,OAAS,GACrBD,EAAWE,KAAKJ,EAAOK,OAAOC,KAAKC,MAAMD,KAAKE,SAAWR,EAAOG,QAAS,GAAG,IAG9E,OAAOD,I,mCAGIO,GAAc,IAAD,OAElBC,EAAYC,KAAK/B,MAAMe,WAAWM,QAGlCW,EAAWD,KAAKjB,eAGlBxB,EAAQyC,KAAK/B,MAAMV,MACnBC,EAAYwC,KAAK/B,MAAMT,UAmB3B,GAhBKwC,KAAK/B,MAAMe,WAAWkB,SAASJ,KAE9BvC,IAAUC,GACZD,IACAC,KAIAD,IAIFwC,EAAUN,KAAKK,IAIbE,KAAK/B,MAAMe,WAAWkB,SAASJ,GAAc,CAE/C,OAAOE,KAAK5B,SAAS,CACnBb,MAFU,EAGVC,UAAWA,EACXF,WAAY,YACZD,aAAc,mBACdyB,UAAWmB,EACXjB,WAAY,GACZC,OAAO,IAgBX,OAXAe,KAAK5B,SAAS,CACZb,MAAOA,EACPC,UAAWA,EACXF,WAAY,UACZD,aAAc,yBACdyB,UAAWmB,EACXjB,WAAYe,EACZd,OAAO,IAIFkB,YAAW,kBAAM,EAAK/B,SAAS,CAAEd,WAAY,OAAO,O,+BAO3D,IAAMW,EAAQ+B,KAAK/B,MACnB,OACE,6BACE,kBAAC,EAAD,CACEV,MAAOU,EAAMV,MACbC,UAAWS,EAAMT,UACjBF,WAAYW,EAAMX,WAClBD,aAAcY,EAAMZ,eAEtB,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE4B,MAAOhB,EAAMgB,MACbH,UAAWb,EAAMa,UACjBI,WAAYc,KAAKd,kB,GAnHTN,a,MCCEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f5404187.chunk.js","sourcesContent":["import React from 'react';\nimport './navbar.css';\n\nconst Navbar = props => (\n  <div className=\"navbar \">\n    <div>Clicky Game</div>\n    <div className={props.clickQuality}>{props.clickImage}</div>\n    <div>\n      Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\n    </div>\n  </div>\n);\n\n\nexport default Navbar;\n","import React from 'react';\nimport './instructions.css';\n\nconst Instructions = () => (\n    <div className=\"banner text-center d-flex align-items-center justify-content-center\">\n      <p className=\"m-0\">Click on an image and earn points. If you click on the same image twice you lose!</p>\n    </div>\n  );\n  \n  export default Instructions;\n  ","import React from 'react';\nimport './mysticals.css';\n\n// the onClick function for the clicked image so you can tell if it's been clicked before\n// const Mysticals = props => (\n//   <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n//     <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n//   </div>\n// );\n\nconst Mysticals = props => {\n  // console.log(props);\n  return(\n  <div className=\"card\" key={props.target.key}>\n    <img className=\"card-img-top card-height\" src={props.target.image} alt=\"\" />\n  </div>)\n};\n\n\nexport default Mysticals;\n","import React, { Component } from 'react';\n// import images from './images.js';\nimport pictures from './pictures.json';\nimport Mysticals from '../Mysticals/mysticals.js';\nimport './game.css';\n// import '../Container/container.js';\n\n\n\nclass Game extends Component {\n  state = {\n    count: 0\n  };\n\n  // handleIncrement increases this.state.count by 1\n  handleIncrement = () => {\n    // We always use the setState method to update a component's state\n    this.setState({ count: this.state.count + 1 });\n    console.log(this.state.count)\n  };\n\n  render() {\n    // console.log(\"pictures\", pictures)\n    return (\n      <div className=\"row\">\n        {pictures.map(item => (\n          <div className=\"col-md-3\" key={item.id}>\n            <Mysticals\n              target={item}\n              className=\"btn btn-primary\" onClick={this.handleIncrement}>\n            </Mysticals>\n          </div>\n        ))}\n      </div>\n\n    )\n  }\n};\n\nexport default Game;\n\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar/navbar.js'\nimport Instructions from './components/Instructions/instructions.js'\nimport Game from './components/Game/Game.js'\nimport pictures from './components/Game/pictures.json'\nimport './components/Mysticals/mysticals.js';\n// import Container from '../Container/container.js';\n\n\nclass App extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    clickQuality: '',\n\n    // contains intro, success, and failure message\n    clickImage: '',\n\n    // contains an array of image urls\n    mysticals: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  clickEvent = this.checkClicked.bind(this);\n\n  // myHappyClick = () => {console.log(\"clicked\")}\n  // // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    const newArr = pictures.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        clickImage: 'incorrect',\n        clickQuality: 'Incorrect guess!',\n        mysticals: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      clickImage: 'correct',\n      clickQuality: 'You Guessed Correctly!',\n      mysticals: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ clickImage: '' }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized array to Container to create a Mystical component for each image.\n  // passes the this.checkClicked down to container to pass to each Mystical component to be used for the click event.\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          clickImage={state.clickImage}\n          clickQuality={state.clickQuality}\n        />\n        <Instructions />\n        <Game\n          shake={state.shake}\n          mysticals={state.mysticals}\n          clickEvent={this.clickEvent}\n        />\n      </div>\n    );\n  }\n}\n\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//     <div className = \"Container\">\n//     <Navbar />\n//     <Instructions />\n//     <div className = \"row\">\n//     <Game />\n    \n//         </div>\n//         </div>\n//         </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}