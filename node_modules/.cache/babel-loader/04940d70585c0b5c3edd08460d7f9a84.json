{"ast":null,"code":"var _jsxFileName = \"/Users/jtempkins/Documents/FAF_Workspace/Homework/15_Homework/ClickyGame/src/App.js\";\nimport React from 'react'; // import logo from './logo.svg';\n\nimport './App.css';\nimport Navbar from './components/Navbar/navbar.js';\nimport Instructions from './components/Instructions/instructions.js';\nimport Game from './components/Game/Game.js';\nimport pictures from './components/Game/pictures.json';\n\nclass ClickyGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      highScore: 0,\n      // stores the class value to assign to navMessage based on a good or bad click\n      clickQuality: '',\n      // contains intro, success, and failure message\n      clickImage: 'Click an image to begin!',\n      // contains an array of image urls\n      mysticals: this.shuffleArray(),\n      // will track  each clicked element.\n      wasClicked: [],\n      // shakes the container on an incorrect guess if set to true\n      shake: false\n    };\n    this.clickEvent = this.checkClicked.bind(this);\n  }\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    const newArr = images.slice(); // will store the shuffled array\n\n    const shuffleArr = []; // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice(); // shuffles the images\n\n    const shuffled = this.shuffleArray(); // tracks score\n\n    let score = this.state.score;\n    let highScore = this.state.highScore; // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++; // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      } // adds the clicked item to wasClicked to track that it has been clicked\n\n\n      prevState.push(clickedElem);\n    } // resets the current score if the same element was clicked twice\n\n\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        clickImage: 'incorrect',\n        clickQuality: 'Incorrect guess!',\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    } // if this runs, then the same element has not been clicked twice and the score is increased\n\n\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'correct',\n      navMessage: 'You Guessed Correctly!',\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    }); // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n\n    return setTimeout(() => this.setState({\n      navMsgColor: ''\n    }), 500);\n  } // renders score to the navbar.\n  // passes the randomized state.allCharacters array to Container to create a Character component for each image.\n  // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n\n\n  render() {\n    const state = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: state.score,\n      highScore: state.highScore,\n      navMessage: state.navMessage,\n      navMsgColor: state.navMsgColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(Instructions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(Game, {\n      shake: state.shake,\n      characters: state.allCharacters,\n      clickEvent: this.clickEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction App() {\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"Container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(Instructions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(Game, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jtempkins/Documents/FAF_Workspace/Homework/15_Homework/ClickyGame/src/App.js"],"names":["React","Navbar","Instructions","Game","pictures","ClickyGame","Component","state","score","highScore","clickQuality","clickImage","mysticals","shuffleArray","wasClicked","shake","clickEvent","checkClicked","bind","newArr","images","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","shuffled","includes","setState","allCharacters","navMsgColor","navMessage","setTimeout","render","App"],"mappings":"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","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar/navbar.js'\nimport Instructions from './components/Instructions/instructions.js'\nimport Game from './components/Game/Game.js'\nimport pictures from './components/Game/pictures.json'\n\nclass ClickyGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    clickQuality: '',\n\n    // contains intro, success, and failure message\n    clickImage: 'Click an image to begin!',\n\n    // contains an array of image urls\n    mysticals: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  clickEvent = this.checkClicked.bind(this);\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    const newArr = images.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        clickImage: 'incorrect',\n        clickQuality: 'Incorrect guess!',\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'correct',\n      navMessage: 'You Guessed Correctly!',\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized state.allCharacters array to Container to create a Character component for each image.\n  // passes the this.checkClicked down to container to pass to each Character component to be used for the click event.\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Instructions />\n        <Game\n          shake={state.shake}\n          characters={state.allCharacters}\n          clickEvent={this.clickEvent}\n        />\n      </div>\n    );\n  }\n}\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className = \"Container\">\n    <Navbar />\n    <Instructions />\n    <div className = \"row\">\n    <Game />\n    \n        </div>\n        </div>\n        </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}