{"ast":null,"code":"import _classCallCheck from\"/Users/jtempkins/Documents/FAF_Workspace/Homework/15_Homework/ClickyGame/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/jtempkins/Documents/FAF_Workspace/Homework/15_Homework/ClickyGame/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/jtempkins/Documents/FAF_Workspace/Homework/15_Homework/ClickyGame/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/jtempkins/Documents/FAF_Workspace/Homework/15_Homework/ClickyGame/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/Users/jtempkins/Documents/FAF_Workspace/Homework/15_Homework/ClickyGame/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/jtempkins/Documents/FAF_Workspace/Homework/15_Homework/ClickyGame/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';// import logo from './logo.svg';\nimport'./App.css';import Navbar from'./components/Navbar/navbar.js';import Instructions from'./components/Instructions/instructions.js';import Game from'./components/Game/Game.js';import pictures from'./components/Game/pictures.json';import'./components/Mysticals/mysticals.js';// import Container from '../Container/container.js';\nvar App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(){var _getPrototypeOf2;var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(App)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={score:0,highScore:0,// stores the class value to assign to navMessage based on a good or bad click\nclickQuality:'',// contains intro, success, and failure message\nclickImage:'',// contains an array of image urls\nmysticals:_this.shuffleArray(),// will track  each clicked element.\nwasClicked:[],// shakes the container on an incorrect guess if set to true\nshake:false};_this.clickEvent=_this.checkClicked.bind(_assertThisInitialized(_this));return _this;}_createClass(App,[{key:\"shuffleArray\",// myHappyClick = () => {console.log(\"clicked\")}\n// // used to shuffle the array of images when the DOM loads, and when an image is clicked\nvalue:function shuffleArray(){// creates a copy of the current characters array to modify it by value, and not by reference\nvar newArr=pictures.slice();// will store the shuffled array\nvar shuffleArr=[];// each loop through an index gets spliced from newArr, reducing its length\n// gets a random index based off the current length of newArr\n// splices the value from newArr, and pushes it to shuffleArr\nwhile(newArr.length>0){shuffleArr.push(newArr.splice(Math.floor(Math.random()*newArr.length),1)[0]);}return shuffleArr;}},{key:\"checkClicked\",value:function checkClicked(clickedElem){var _this2=this;// creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\nvar prevState=this.state.wasClicked.slice();// shuffles the images\nvar shuffled=this.shuffleArray();// tracks score\nvar score=this.state.score;var highScore=this.state.highScore;// if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\nif(!this.state.wasClicked.includes(clickedElem)){// if score and highScore are the same, then there is a new highScore value\nif(score===highScore){score++;highScore++;// if they are not equal, then only increase the score value\n}else{score++;}// adds the clicked item to wasClicked to track that it has been clicked\nprevState.push(clickedElem);}// resets the current score if the same element was clicked twice\nif(this.state.wasClicked.includes(clickedElem)){var _score=0;return this.setState({score:_score,highScore:highScore,clickImage:'incorrect',clickQuality:'Incorrect guess!',mysticals:shuffled,wasClicked:[],shake:true});}// if this runs, then the same element has not been clicked twice and the score is increased\nthis.setState({score:score,highScore:highScore,clickImage:'correct',clickQuality:'You Guessed Correctly!',mysticals:shuffled,wasClicked:prevState,shake:false});// removes the green correct indicator on a successful click after .5s to re-render the class on each success\nreturn setTimeout(function(){return _this2.setState({clickImage:''});},500);}// renders score to the navbar.\n// passes the randomized array to Container to create a Mystical component for each image.\n// passes the this.checkClicked down to container to pass to each Mystical component to be used for the click event.\n},{key:\"render\",value:function render(){var state=this.state;return React.createElement(\"div\",null,React.createElement(Navbar,{score:state.score,highScore:state.highScore,clickImage:state.clickImage,clickQuality:state.clickQuality}),React.createElement(Instructions,null),React.createElement(Game,{shake:state.shake,mysticals:state.mysticals,clickEvent:this.clickEvent}));}}]);return App;}(Component);// function App() {\n//   return (\n//     <div className=\"App\">\n//     <div className = \"Container\">\n//     <Navbar />\n//     <Instructions />\n//     <div className = \"row\">\n//     <Game />\n//         </div>\n//         </div>\n//         </div>\n//   );\n// }\nexport default App;","map":{"version":3,"sources":["/Users/jtempkins/Documents/FAF_Workspace/Homework/15_Homework/ClickyGame/src/App.js"],"names":["React","Component","Navbar","Instructions","Game","pictures","App","state","score","highScore","clickQuality","clickImage","mysticals","shuffleArray","wasClicked","shake","clickEvent","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","shuffled","includes","setState","setTimeout"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar/navbar.js'\nimport Instructions from './components/Instructions/instructions.js'\nimport Game from './components/Game/Game.js'\nimport pictures from './components/Game/pictures.json'\nimport './components/Mysticals/mysticals.js';\n// import Container from '../Container/container.js';\n\n\nclass App extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    clickQuality: '',\n\n    // contains intro, success, and failure message\n    clickImage: '',\n\n    // contains an array of image urls\n    mysticals: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  clickEvent = this.checkClicked.bind(this);\n\n  // myHappyClick = () => {console.log(\"clicked\")}\n  // // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current characters array to modify it by value, and not by reference\n    const newArr = pictures.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        clickImage: 'incorrect',\n        clickQuality: 'Incorrect guess!',\n        mysticals: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      clickImage: 'correct',\n      clickQuality: 'You Guessed Correctly!',\n      mysticals: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ clickImage: '' }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized array to Container to create a Mystical component for each image.\n  // passes the this.checkClicked down to container to pass to each Mystical component to be used for the click event.\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          clickImage={state.clickImage}\n          clickQuality={state.clickQuality}\n        />\n        <Instructions />\n        <Game\n          shake={state.shake}\n          mysticals={state.mysticals}\n          clickEvent={this.clickEvent}\n        />\n      </div>\n    );\n  }\n}\n\n\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//     <div className = \"Container\">\n//     <Navbar />\n//     <Instructions />\n//     <div className = \"row\">\n//     <Game />\n    \n//         </div>\n//         </div>\n//         </div>\n//   );\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}